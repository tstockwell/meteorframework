<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"  [ ]>

<chapter id="mixins">
  <title>Getting started with Web Beans</title>
  
  <para>So you're already keen to get started writing your first Web Bean?
  Or perhaps you're skeptical, wondering what kinds of hoops the Web Beans
  specification will make you jump through! The good news is that you've
  probably already written and used hundreds, perhaps thousands of Web Beans.
  You might not even remember the first Web Bean you wrote.</para>
      
  <section>
    <title>Your first Web Bean</title>
    
    <para>With certain, very special exceptions, every Java class with a 
    constructor that accepts no parameters is a Web Bean. That includes every 
    JavaBean. Furthermore, every EJB 3-style session bean is a Web Bean. Sure, 
    the JavaBeans and EJBs you've been writing every day have not been able to 
    take advantage of the new services defined by the Web Beans specification, 
    but you'll be able to use every one of them as Web Beans &#151; injecting them 
    into other Web Beans, configuring them via the Web Beans XML configuration 
    facility, even adding interceptors and decorators to them &#151; without 
    touching your existing code.</para>
    
    <para>Suppose that we have two existing Java classes, that we've been using
    for years in various applications. The first class parses a string into a 
    list of sentences:</para>
    
    <programlisting role="JAVA"><![CDATA[public class SentenceParser {
    public List<String> parse(String text) { ... }
}]]></programlisting>

    <para>The second existing class is a stateless session bean front-end for an
    external system that is able to translate sentences from one language to 
    another:</para>
    
    <programlisting role="JAVA"><![CDATA[@Stateless
public class SentenceTranslator implements Translator {
    public String translate(String sentence) { ... }
}]]></programlisting>

    <para>Where <literal>Translator</literal> is the local interface:</para>
    
    <programlisting role="JAVA"><![CDATA[@Local
public interface Translator {
    public String translate(String sentence);
}]]></programlisting>

    <para>Unfortunately, we don't have a preexisting class that translates whole
    text documents. So let's write a Web Bean that does this job:</para>
    
    <programlisting role="JAVA"><![CDATA[public class TextTranslator {
    
    private SentenceParser sentenceParser;
    private Translator sentenceTranslator;
    
    @Initializer
    TextTranslator(SentenceParser sentenceParser, Translator sentenceTranslator) {
        this.sentenceParser = sentenceParser;
        this.sentenceTranslator = sentenceTranslator;
    }
    
    public String translate(String text) {
        StringBuilder sb = new StringBuilder();
        for (String sentence: sentenceParser.parse(text)) {
            sb.append(sentenceTranslator.translate(sentence));
        }
        return sb.toString();
    }
    
}]]></programlisting>

    <para>We may obtain an instance of <literal>TextTranslator</literal> by 
    injecting it into a Web Bean, Servlet or EJB:</para>
    
    <programlisting role="JAVA"><![CDATA[@Initializer
public setTextTranslator(TextTranslator textTranslator) {
    this.textTranslator = textTranslator;
}]]></programlisting>

    <para>Alternatively, we may obtain an instance by directly calling a method 
    of the Web Bean manager:</para>

    <programlisting role="JAVA"><![CDATA[TextTranslator tt = manager.getInstanceByType(TextTranslator.class);]]></programlisting>
    
    <para>But wait: <literal>TextTranslator</literal> does not have a constructor
    with no parameters! Is it still a Web Bean? Well, a class that does not have a 
    constructor with no parameters can still be a Web Bean if it has a constructor
    annotated <literal>@Initializer</literal>.</para>
        
    <para>As you've guessed, the <literal>@Initializer</literal> annotation has
    something to do with dependency injection! <literal>@Initializer</literal>
    may be applied to a constructor or method of a Web Bean, and tells the
    Web Bean manager to call that constructor or method when instantiating the
    Web Bean. The Web Bean manager will inject other Web Beans to the parameters
    of the constructor or method.</para>
    
    <para>At system initialization time, the Web Bean manager must validate that 
    exactly one Web Bean exists which satisfies each injection point. In our example,
    if no implementation of <literal>Translator</literal> available &#151; if the
    <literal>SentenceTranslator</literal> EJB was not deployed &#151; the Web Bean
    manager would throw an <literal>UnsatisfiedDependencyException</literal>. If
    more than one implementation of <literal>Translator</literal> was available,
    the Web Bean manager would throw an 
    <literal>AmbiguousDependencyException</literal>.</para>
    
  </section>
  
<section>
  <title>What is a Web Bean?</title>

  <para>So what, <emphasis>exactly</emphasis>, is a Web Bean?</para>

  <para>A Web Bean is an application class that contains business logic. A Web 
  Bean may be called directly from Java code, or it may be invoked via Unified EL.
  A Web Bean may access transactional resources. Dependencies between Web Beans 
  are managed automatically by the Web Bean manager. Most Web Beans are 
  <emphasis>stateful</emphasis> and <emphasis>contextual</emphasis>. The lifecycle 
  of a Web Bean is always managed by the Web Bean manager.</para>

  <para>Let's back up a second. What does it really mean to be "contextual"? Since 
  Web Beans may be stateful, it matters <emphasis>which</emphasis> bean instance I 
  have. Unlike a stateless component model (for example, stateless session beans) 
  or a singleton component model (such as servlets, or singleton beans), different 
  clients of a Web Bean see the Web Bean in different states. The client-visible 
  state depends upon which instance of the Web Bean the client has a reference to.</para> 

  <para>However, like a stateless or singleton model, but <emphasis>unlike</emphasis> 
  stateful session beans, the client does not control the lifecycle of the instance 
  by explicitly creating and destroying it. Instead, the <emphasis>scope</emphasis> 
  of the Web Bean determines:</para>

  <itemizedlist>
    <listitem>
      <para>the lifecycle of each instance of the Web Bean and</para>
    </listitem>
    <listitem>
      <para>which clients share a reference to a particular instance of the Web 
      Bean.</para>
    </listitem>
  </itemizedlist>
  
  <para>For a given thread in a Web Beans application, there may be an 
  <emphasis>active context</emphasis> associated with the scope of the Web Bean. 
  This context may be unique to the thread (for example, if the Web Bean is request
  scoped), or it may be shared with certain other threads (for example, if the Web
  Bean is session scoped) or even all other threads (if it is application scoped).</para>

  <para>Clients (for example, other Web Beans) executing in the same context will 
  see the same instance of the Web Bean. But clients in a different context will 
  see a different instance.</para>

  <para>One great advantage of the contextual model is that it allows stateful
  Web Beans to be treated like services! The client need not concern itself with 
  managing the lifecycle of the Web Bean it is using, <emphasis>nor does it even 
  need to know what that lifecyle is.</emphasis> Web Beans interact by passing 
  messages, and the Web Bean implementations define the lifecycle of their own state. 
  The Web Beans are loosely coupled because:</para>

  <itemizedlist>
    <listitem>
      <para>they interact via well-defined public APIs</para>
    </listitem>
    <listitem>
      <para>their lifecycles are completely decoupled</para>
    </listitem>
  </itemizedlist>

  <para>We can replace one Web Bean with a different Web Bean that implements the 
  same API and has a different lifecycle (a different scope) without affecting the 
  other Web Bean implementation. In fact, Web Beans defines a sophisticated 
  facility for overriding Web Bean implementations at deployment time, as we will 
  see in <xref linkend="deploymenttypes"/>.</para>
  
  <para>Note that not all clients of a Web Bean are Web Beans. Other objects
  such as Servlets or Message-Driven Beans &#151; which are by nature not injectable,
  contextual objects &#151; may also obtain references to Web Beans by injection.</para>

  <para>Enough hand-waving. More formally, according to the spec:</para>

  <blockquote>

  <para>A Web Bean comprises:</para>

  <itemizedlist>
    <listitem><para>A (nonempty) set of API types</para></listitem>
    <listitem><para>A (nonempty) set of binding annotation types</para></listitem>
    <listitem><para>A scope</para></listitem>
    <listitem><para>A deployment type</para></listitem>
    <listitem><para>Optionally, a Web Bean name</para></listitem>
    <listitem><para>A set of interceptor binding types</para></listitem>
    <listitem><para>A Web Bean implementation</para></listitem>
  </itemizedlist>

  </blockquote>

  <para>Let's see what some of these terms mean, to the Web Bean developer.</para>

<section>
  <title>API types, binding types and dependency injection</title>

  <para>Web Beans usually acquire references to other Web Beans via dependency 
  injection. Any injected attribute specifies a "contract" that must be
  satisfied by the Web Bean to be injected. The contract is:</para>

  <itemizedlist>
    <listitem><para>an API type, together with</para></listitem>
    <listitem><para>a set of binding types.</para></listitem>
  </itemizedlist>

  <para>An API is a user-defined class or interface. (If the Web Bean is an
  EJB session bean, the API type is the <literal>@Local</literal> interface or
  bean-class local view). A binding type represents some client-visible semantic 
  that is satisfied by some implementations of the API and not by others.</para>

  <para>Binding types are represented by user-defined annotations that are 
  themselves annotated <literal>@BindingType</literal>. For example, the following
  injection point has API type <literal>PaymentProcessor</literal> and binding
  type <literal>@CreditCard</literal>:</para>

<programlisting role="JAVA"><![CDATA[@CreditCard PaymentProcessor paymentProcessor]]></programlisting>

  <para>If no binding type is explicitly specified at an injection point, the 
  default binding type <literal>@Current</literal> is assumed.</para>

  <para>For each injection point, the Web Bean manager searches for a Web Bean 
  which satisfies the contract (implements the API, and has all the binding 
  types), and injects that Web Bean.</para>

  <para>The following Web Bean has the binding type <literal>@CreditCard</literal>
  and implements the API type <literal>PaymentProcessor</literal>. It could 
  therefore be injected to the example injection point:</para>

<programlisting role="JAVA"><![CDATA[@CreditCard
public class CreditCardPaymentProcessor 
    implements PaymentProcessor { ... }]]></programlisting>

  <para>If a Web Bean does not explicitly specify a set of binding types, it has 
  exactly one binding type: the default binding type <literal>@Current</literal>.</para>

  <para>Web Beans defines a sophisticated but intuitive <emphasis>resolution 
  algorithm</emphasis> that helps the container decide what to do if there is more 
  than one Web Bean that satisfies a particular contract. We'll get into the
  details in <xref linkend="injection"/>.</para>

</section>

<section>
  <title>Deployment types</title>

  <para><emphasis>Deployment types</emphasis> let us classify our Web Beans by
  deployment scenario. A deployment type is an annotation that represents a particular
  deployment scenario, for example <literal>@Mock</literal>, <literal>@Staging</literal> 
  or <literal>@AustralianTaxLaw</literal>. We apply the annotation to Web Beans which
  should be deployed in that scenario. A deployment type allows a whole set of Web Beans 
  to be conditionally deployed, with a just single line of configuration.</para>

  <para>Many Web Beans just use the default deployment type <literal>@Production</literal>, 
  in which case no deployment type need be explicitly specified. All three Web Bean 
  in our example have the deployment type <literal>@Production</literal>.</para>

  <para>In a testing environment, we might want to replace the <literal>SentenceTranslator</literal>
  Web Bean with a "mock object":</para>

<programlisting role="JAVA"><![CDATA[@Mock
public class MockSentenceTranslator implements Translator {
    public String translate(String sentence) {
        return "Lorem ipsum dolor sit amet";
    }
}]]></programlisting>


  <para>We would enable the deployment type <literal>@Mock</literal> in our testing
  environment, to indicate that <literal>MockSentenceTranslator</literal> and any other
  Web Bean annotated <literal>@Mock</literal> should be used.</para>

  <para>We'll talk more about this unique and powerful feature in 
  <xref linkend="deploymenttypes"/>.</para>

</section>

<section>
  <title>Scope</title>

  <para>The <emphasis>scope</emphasis> defines the lifecycle and visibility 
  of instances of the Web Bean. The Web Beans context model is extensible, 
  accommodating arbitrary scopes. However, certain important scopes are 
  built-in to the specification, and provided by the Web Bean manager. A
  scope is represented by an annotation type.</para>

  <para>For example, any web application may have <emphasis>session scoped</emphasis> 
  Web Beans:</para>

<programlisting role="JAVA"><![CDATA[@SessionScoped
public class ShoppingCart { ... }]]></programlisting>

  <para>An instance of a session scoped Web Bean is bound to a user session
  and is shared by all requests that execute in the context of that session.</para>

  <para>By default, Web Beans belong to a special scope called the 
  <emphasis>dependent pseudo-scope</emphasis>. Web Beans with this scope are
  pure dependent objects of the object into which they are injected, and their
  lifecycle is bound to the lifecycle of that object.</para>

  <para>We'll talk more about scopes in <xref linkend="scopescontexts"/>.</para>

</section>

<section>
  <title>Web Bean names and Unified EL</title>

  <para>A Web Bean may have a <emphasis>name</emphasis>, allowing it to be 
  used in Unified EL expressions. It's easy to specify the name of a Web 
  Bean:</para>

<programlisting role="JAVA"><![CDATA[@SessionScoped @Named("cart")
public class ShoppingCart { ... }]]></programlisting>

  <para>Now we can easily use the Web Bean in any JSF or JSP page:</para>

<programlisting role="HTML"><![CDATA[<h:dataTable value="#{cart.lineItems}" var="item">
    ....
</h:dataTable>]]></programlisting>

  <para>It's even easier to just let the name be defaulted by the Web Bean
  manager:</para>

<programlisting role="JAVA"><![CDATA[@SessionScoped @Named
public class ShoppingCart { ... }]]></programlisting>

  <para>In this case, the name defaults to <literal>shoppingCart</literal> &#151; the
  unqualified class name, with the first character changed to lowercase.</para>

</section>

<section>
  <title>Interceptor binding types</title>
  
  <para>Web Beans supports the interceptor functionality defined by EJB 3,
  not only for EJB beans, but also for plain Java classes. In addition, 
  Web Beans provides a new approach to binding interceptors to EJB beans
  and other Web Beans.</para> 
  
  <para>It remains possible to directly specify the interceptor class via 
  use of the <literal>@Interceptors</literal> annotation:</para>
  
<programlisting role="JAVA"><![CDATA[@SessionScoped 
@Interceptors(TransactionInterceptor.class)
public class ShoppingCart { ... }]]></programlisting>

  <para>However, it is more elegant, and better practice, to indirect the
  interceptor binding through an <emphasis>interceptor binding 
  type</emphasis>:</para>
  
<programlisting role="JAVA"><![CDATA[@SessionScoped @Transactional
public class ShoppingCart { ... }]]></programlisting>

  <para>We'll discuss Web Beans interceptors and decorators in
  <xref linkend="interceptors"/> and <xref linkend="decorators"/>.</para>

</section>

</section>

<section>
  <title>What kinds of objects can be Web Beans?</title>
  
  <para>We've already seen that JavaBeans, EJBs and some other Java classes can
  be Web Beans. But exactly what kinds of objects are Web Beans?</para>
  
  <section>
    <title>Simple Web Beans</title>
  
    <para>The Web Beans specification says that a concrete Java class is a 
    <emphasis>simple</emphasis> Web Bean if:</para>
    
    <itemizedlist>
      <listitem>
        <para>it is not an EE container-managed component, like an EJB, a Servlet
        or a JPA entity,</para>
      </listitem>
      <listitem>
        <para>it is not a non-static static inner class,</para>
      </listitem>
      <listitem>
        <para>it is not a parameterized type, and</para>
      </listitem>
      <listitem>
        <para>it has a constructor with no parameters, or a constructor annotated
        <literal>@Initializer</literal>.</para>
      </listitem>
    </itemizedlist>
    
    <para>Thus, almost every JavaBean is a simple Web Bean.</para>
    
    <para>Every interface implemented directly or indirectly by a simple Web Bean
    is an API type of the simple Web Bean. The class and its superclasses are also 
    API types.</para>
    
  </section>
  
  <section>
    <title>Enterprise Web Beans</title>
  
    <para>The specification says that all EJB 3-style session and singleton beans
    are <emphasis>enterprise</emphasis> Web Beans. Message driven beans are not
    Web Beans &#151; since they are not intended to be injected into other 
    objects &#151; but they can take advantage of most of the functionality of Web 
    Beans, including dependency injection and interceptors.</para>
   
    <para>Every local interface of an enterprise Web Bean that does not have a 
    wildcard type parameter or type variable, and every one of its superinterfaces, 
    is an API type of the enterprise Web Bean. If the EJB bean has a bean class
    local view, the bean class, and every one of its superclasses, is also an API 
    type.</para>
    
    <para>Stateful session beans should declare a remove method with no parameters
    or a remove method annotated <literal>@Destructor</literal>. The Web Bean
    manager calls this method to destroy the stateful session bean instance at the
    end of its lifecycle. This method is called the <emphasis>destructor</emphasis>
    method of the enterprise Web Bean.</para>
    
<programlisting role="JAVA"><![CDATA[@Stateful @SessionScoped
public class ShoppingCart {

    ...
    
    @Remove
    public void destroy() {}

}]]></programlisting>

    <para>So when should we use an enterprise Web Bean instead of a simple Web Bean?
    Well, whenever we need the advanced enterprise services offered by EJB, such
    as:</para>
    
    
    <itemizedlist>
      <listitem>
        <para>method-level transaction management and security,</para>
      </listitem>
      <listitem>
        <para>concurrency management,</para>
      </listitem>
      <listitem>
        <para>instance-level passivation for stateful session beans and 
        instance-pooling for stateless session beans,</para>
      </listitem>
      <listitem>
        <para>remote and web service invocation, and</para>
      </listitem>
      <listitem>
        <para>timers and asynchronous methods,</para>
      </listitem>
    </itemizedlist>
    
    <para>we should use an enterprise Web Bean. When we don't need any of these things, 
    a simple Web Bean will serve just fine.</para>
    
    <para>Many Web Beans (including any session or application scoped Web Bean) are
    available for concurrent access. Therefore, the concurrency management provided
    by EJB 3.1 is especially useful. Most session and application scoped Web Beans
    should be EJBs.</para>
    
    <para>Web Beans which hold references to heavy-weight resources, or hold a lot
    of internal state benefit from the advanced container-managed lifecycle defined
    by the EJB <literal>@Stateless</literal>/<literal>@Stateful</literal>/<literal>@Singleton</literal>
    model, with its support for passivation and instance pooling.</para>
    
    <para>Finally, it's usually obvious when method-level transaction management,
    method-level security, timers, remote methods or asynchronous methods are needed.</para>
    
    <para>It's usually easy to start with simple Web Bean, and then turn it into an 
    EJB, just by adding an annotation: <literal>@Stateless</literal>, 
    <literal>@Stateful</literal> or <literal>@Singleton</literal>.</para>

  </section>
  
  <section>
    <title>Producer methods</title>

    <para>A <emphasis>producer method</emphasis> is a method that is called by the 
    Web Bean manager to obtain an instance of the Web Bean when no instance exists 
    in the current context. A producer method lets the application take full control
    of the instantiation process, instead of leaving instantiation to the Web Bean
    manager. For example:</para>

<programlisting role="JAVA"><![CDATA[@ApplicationScoped
public class Generator {

    private Random random = new Random( System.currentTimeMillis() );
    
    @Produces @Random int next() {
        return random.nextInt(100);
    }

}]]></programlisting>

    <para>The result of a producer method is injected just like any other Web Bean.</para>

    <programlisting role="JAVA"><![CDATA[@Random int randomNumber]]></programlisting>
    
    <para>The method return type and all interfaces it extends/implements directly or indirectly 
    are API types of the producer method. If the return type is a class, all superclasses are 
    also API types.</para>
    
    <para>Some producer methods return objects that require explicit destruction:</para>
    
<programlisting role="JAVA"><![CDATA[@Produces @RequestScoped Connection connect(User user) {
    return createConnection( user.getId(), user.getPassword() );
}]]></programlisting>

    <para>These producer methods may define matching <emphasis>disposal methods</emphasis>:</para>
    
<programlisting role="JAVA"><![CDATA[void close(@Disposes Connection connection) {
    connection.close();
}]]></programlisting>

    <para>This disposal method is called automatically by the Web Bean manager at 
    the end of the request.</para>

    <para>We'll talk much more about producer methods in <xref linkend="producermethods"/>.</para>

  </section>

  <section>
    <title>JMS endpoints</title>
    
    <para>Finally, a JMS queue or topic can be a Web Bean. Web Beans relieves the
    developer from the tedium of managing the lifecycles of all the various JMS 
    objects required to send messages to queues and topics. We'll discuss JMS
    endpoints in <xref linkend="jms"/>.</para>
    
  </section>

</section>

</chapter>