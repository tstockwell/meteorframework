<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"  [ ]>

<chapter id="intro">
  <title>Introduction to the Meteor Framework</title>
  
  <para>The chapter is an introduction to how Meteor implements its <link linkend="design_goals">design goals</link>.
  To reiterate, the Meteor framework is designed with the following design goals:
  <itemizedlist>
  	<listitem><para>All functionality is packaged into modules that are assembled into software systems.</para></listitem>
  	<listitem><para>A global metadata repository makes it possible for a module to implement entire software aspects like logging, persistence and UI.</para></listitem>
  	<listitem><para>All functionality may be customized without requiring vendors to build customization hooks into their modules.</para></listitem>
  	<listitem><para>Customizations and extensions are packaged into modules and may be dynamically added or removed from a system without technical assistance.</para></listitem>
  	<listitem><para>All modules in a system may be dynamically updated without technical assistance.</para></listitem>
  	<listitem><para>Meteor itself implements many aspects out of the box, like user authentication and authorization, data storage, and user interface.</para></listitem>
  </itemizedlist>
  </para>
  
  
  <section>
  	<title>Java</title>
  	<para>
  	Meteor uses Java as the underlying runtime platform.  Nuff said.  
  	In the future it is highly probable that Meteor will support the development 
  	of Meteor modules in other languages that run on the Java Virtual Machine 
  	but for now all Meteor modules are developed with Java.      
  	</para>
  </section>
  
  <section>
  	<title>Modularity = OSGi Bundles</title>
  	<para>
  	Meteor's first design goal is to make it possible to assemble a software 
  	system from modules.  Instead of defining its own concept of what a module is 
  	Meteor instead has adopted the <ulink url="http://www.osgi.org">OSGi Service Framework</ulink> 
  	as the standard for defining what a module is, how modules are deployed, 
  	installed, started, etc. Therefore, all Meteor functionality is package into OSGi 'bundles'. 
  	All Meteor-based systems run on top of an OSGi 'engine' that manages all bundles.
  	</para>
  	<para>
  	A central focus of the OSGi framework is the concept of 'services'.  Meteor is 
  	designed to integrate well with existing OSGi services by making it possible to 
  	automatically 'inject' standard OSGi services into Meteor-managed resources and 
  	to automatically export Meteor-managed services as OSGi services.  
  	</para>
  	<para>
  	The OSGi framework also defines many standard services, like a Logging service, a Remoting service, etc. 
  	Meteor takes advantage of available OSGi services whenever possible.
  	</para>
  	<para>
  	Meteor uses the open source <ulink url="http://felix.apache.org/site/index.html">Felix OSGi engine</ulink> as its OSGi engine, however Meteor 
  	should work with other OSGi implementatio such as <ulink url="http://www.eclipse.org/equinox/">Equinox</ulink> and <ulink url="http://concierge.sourceforge.net/">Concierge</ulink>. 
  	</para>
  </section>
  
  <section>
  	<title>Metadata = RDF (Resource Description Format)</title>
	  <section>
	  	<title>Why RDF?</title>
	  	<para>
	  	Meteor's second design goal is to provide a global metadata repository.
	  	A metadata repository enabled model-driven development and make it possible for a module to 
	  	provide an aspect of functionality for the entire system.  For instance, 
	  	when the repository contains a description of all objects that will be persistently 
	  	stored then a single module can provide persistent storage to a database for the 
	  	entire system based on the data in the repository.
	  	</para>
	  	<para>
	  	Meteor has adopted the <ulink url="http://en.wikipedia.org/wiki/Resource_Description_Framework">Resource Description Format</ulink> (RDF) 
	  	for representing metadata. 
	  	RDF is a general method for conceptual description or modeling of information. 
	  	Meteor defines a Java API for accessing and manipulating RDF data. 
	  	Meteor all supports the <ulink url="http://en.wikipedia.org/wiki/Turtle_(syntax)">Turtle RDF serialization format</ulink>.
	  	</para>
	  	<para>
	  	Meteor uses RDF mainly because RDF makes it easy to do one thing that's not easy to 
	  	do in other modeling methods: RDF makes it easy for one module to state 
	  	facts about data in another module. 
	  	For instance, suppose one module contain metadata that defines contact information for a person.  
	  	Then suppose that another module wants to add a twitter id to that contact information. 
	  	This is exactly the kind of thing that is easy to do with RDF but is quite difficult 
	  	to do with other methods.  This feature of RDF is exactly what is needed in order to 
	  	make it possible for modules to customize each other.
	  	</para>
	  </section>
	  
	  <section>
	  	<title>What data is available in the repository?</title>
	  </section>
  </section>
   
  <section>
  	<title>Customization: Metadata-driven Guice</title>
  	<para>
  	Some existing application development frameworks make it easier to customize 
  	software by adding what are called hooks, or extension points. 
  	For instance, in order to make it possible for other modules to add menu 
  	items to an applications main menu the module that provides the user interface 
  	may create a hook where other modules can register additional menu items. 
  	The problems with this type of customization are:
  	<itemizedlist>
  		<listitem><para>It requires significant extra effort on the part of the developer to create the hooks used for customization and extension</para></listitem>
  		<listitem><para>It limits reuse since hooks have to be created <emphasis>before</emphasis> a module can be customized. 
  		However, developers never anticipate all the ways in which a module may be resued and even if they do they often don't 
  		make the effort to create hooks until and unless they know someone else is going to use them.</para></listitem>
  	</itemizedlist>
  	For these reasons it is better to support an extension and customization 
  	scheme that does not require hooks, a scheme that enables modules to directly 
  	'plug into' objects from other modules.  
  	</para>
  	
  	<para><ulink url="">Guice</ulink></para>
  	
  	<para>
  	There are two types of customization that can be made to software, customizing 
  	data or customizing behavior.  An example of customizing data would be adding 
  	a new menu item to an application's main menu.  An example of customizing behavior 
  	would be performing spell checking on items when they are saved to the database. 
  	In Meteor all relevant data goes into the metadata repository and data customizations 
  	are always made to the data in the repository.  In Meteor, like in Java, all behavior 
  	in encapsulated in objects but, unlike Java, Meteor makes it possible for modules 
  	to customize the behavior of object from other modules by creating 'decorators' 
  	and 'interceptors'.  
  	<section>
  	
An interceptor is a method that intercepts a business method invocation or a lifecycle callback event.
An interceptor method may be defined on the bean class or on an interceptor class associated with the
bean. An interceptor class is a class (distinct from the bean class itself) whose methods are invoked in
response to business method invocations and/or lifecycle events on the bean class. Interceptors may be
defined for session beans and message-driven beans. Business method interceptor methods may be
defined to apply to all business methods of the bean class or to specific business methods only.  	
  	</section>
  	<para>
  	Meteor has adopted the <ulink url="http://en.wikipedia.org/wiki/Resource_Description_Framework">Resource Description Format</ulink> (RDF) 
  	for representing metadata. 
  	RDF is a general method for conceptual description or modeling of information. 
  	Meteor defines a Java API for accessing and manipulating RDF data. 
  	Meteor all supports the <ulink url="http://en.wikipedia.org/wiki/Turtle_(syntax)">Turtle RDF serialization format</ulink>.
  	</para>
  </section>
  
  <section>
  	<title>Out of the Box Functionality</title>
	  <section>
	  	<title>Role-based Authorization</title>
	  </section>
	  <section>
	  	<title>Persistent Storage</title>
	  </section>
	  <section>
	  	<title>WebBench User Interface</title>
	  </section>
  </section>

</chapter>