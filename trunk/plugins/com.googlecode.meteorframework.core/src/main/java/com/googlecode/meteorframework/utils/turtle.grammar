turtleDocument ::= ({%whitespace%} statement {[%whitespace%] statement} {%whitespace%}) 
statement ::= ((directive {%whitespace%} ".") | (triples {%whitespace%} ".")) 
directive ::= (prefixID | base) 
prefixID ::= ("@prefix" %whitespace% [prefixName] ":" {%whitespace%} uriref) 
base ::= ("@base" %whitespace% uriref) 
triples ::= (subject %whitespace% predicateObjectList) 
predicateObjectList ::= (verb %whitespace% objectList {{%whitespace%} ";" {%whitespace%} verb  %whitespace% objectList}) 
objectList ::= (object {{%whitespace%} "," {%whitespace%} object}) 
verb ::= (resource | "a") 
subject ::= (resource | blank) 
object ::= (resource | blank | literal) 
literal ::= (quotedString (["@" language] | datatypeString | integer | double | decimal | boolean)) 
datatypeString ::= (quotedString "^^" resource)
digits ::= (%digit% {%digit%})
sign ::= ("-" | "+")
integer ::= ([sign] digits) 
double ::= ([sign] ((digits "." [digits] exponent) | ("." digits exponent) | (digits exponent)))
decimal ::= ([sign] ((digits "." {digits}) | ("." digits) | digits)) 
exponent ::= (["e" | "E"] [sign] digits) 
boolean ::= ("true" | "false") 
blank ::= (nodeID | "[]" | ("[" predicateObjectList "]") | collection) 
collection ::= ("(" (object {"," object}) ")") 
resource ::= (uriref | qname) 
nodeID ::= ("_:" name)
qname ::= ([prefixName] ":" [name]) 
uriref ::= ("<" relativeURI ">")  
language ::= ((%lower% {%lower%}) {"-" ((%lower% | %digit%) {(%lower% | %digit%)})})  
nameStartChar ::= (%alpha% | "_") 
nameChar ::= (%alpha% | %digit% | "-") 
name ::= (nameStartChar {nameChar})  
prefixName ::= (nameStartChar {nameChar}) 
relativeURI ::= (anychar {anychar}) 
quotedString ::= ("$" {anychar} "$")
anychar ::= (%alpha% | %digit% | " " | ":" | ".")  
