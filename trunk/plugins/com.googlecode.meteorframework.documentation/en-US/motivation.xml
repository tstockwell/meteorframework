<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"  [ ]>

<chapter id="motivation">
  <title>Why Meteor?</title>
  
  <para>
  Small businesses are notoriously underserved by the software industry because 
  developing high-quality, full-featured software is very expensive due to the 
  large amount of labor required and the high cost of the engineers required to 
  create, maintain, and customize software. 
  Companies that produce software systems usually target large companies 
  that can afford the high price of software systems. 
  Software systems for small businesses are often low-quality, 
  slimmed down and incomplete because that's really all that small businesses can 
  afford to pay for.
  Meteor was conceived with the goal of making it possible to 
  profitably create software for small businesses by assembling high-quality, 
  full-featured, customized software systems from modules available from many 
  vendors. 
  </para>
  <para>
  Meteor is designed to benefit the developers of software modules by  
  decreasing the cost to create a module and by increasing the revenue that 
  can be generated from a module by making it possible to reuse modules in 
  more systems.</para><para>
  Meteor is designed to benefit the small businesses that 
  buy software systems by reducing the cost of buying and maintaining a 
  system and by increasing the quality and available features of systems.
  </para>
<section id="design_goals">
  	<title>Design goals</title>
  <para>
  In order to meet the above business goals, the Meteor framework is designed with the following design goals:
  <itemizedlist>
  	<listitem>
  		<formalpara>
  			<title>Dynamic, modular system assembly</title>
  			<para>
	  		All functionality and metadata is packaged into self-contained modules that are assembled into software systems. 
	  		New modules containing additional functionality or customizations of existing funnctionality may be dynamically added to a system without technical assistance. 
	  		Similarly, all modules in a system may be dynamically updated and/or removed without technical assistance.
  			</para>
  		</formalpara>
  		<para>  
  		Modular assembly of systems reduces costs for small businesses in a couple of ways:
		  <itemizedlist>
		  	<listitem><para>It enables systems to be updated and extended with the need for consultants or technical specialists.</para></listitem>
		  	<listitem><para>It fosters competition between vendors since businesses may mix extensions from many vendors and are not tied to any single bendor.</para></listitem>
		  </itemizedlist>
  		Modular assembly of systems can also increase the quality of software 
  		systems by allowing businesses to chose 'best-of-breed' modules instead of 
  		being bound to any one vendor.
  		</para> 
  	</listitem>
  	<listitem>
  		<formalpara>
  			<title>Model-driven system functionality</title>
  			<para>
			A global metadata repository makes it possible for a module to implement 
			entire software aspects like logging, persistence, or a user interface.
			</para>
  		</formalpara>
  		<para>  
  		Model-driven development significantly reduces the cost of module development 
  		for vendors since it eliminates the need for vendors to develop common 
  		system aspects like persistence, or use-interface elements.
  		</para> 
  	</listitem>
  	<listitem>
  		<formalpara>
  			<title>Unanticipated customization, or customization without hooks</title>
  			<para>
			All functionality must be customizable without requiring vendors to build customization hooks into their modules. 
			Many software framework enable customization by requiring developers to build 'hooks or 'extension points' 
			into thier modules.  The problem with this is that it limits reuability and customization to only what 
			vendors anticipate and bother to provide hooks for.  Meteor takes a more 'aspect-oriented' approach to 
			customization that enables customization with requiring built-in hooks.
			</para>
  		</formalpara>
  		<para>  
  		Customization without hooks increases the revenue that can be generated from a module 
  		since it make it possible to reuse modules in ways that were not anticipated by the modules vendor.  
  		Customization without hooks reduces the cost of module development 
  		for vendors since it makes other modules easier to resuse and eliminates much of the labor 
  		required by other customization methods.  
  		Customization without hooks can also reduce costs for businesses by making it possible to create 
  		customized software with significantly less labor than other customization methods.
  		</para> 
  	</listitem>
  	<listitem>
  		<formalpara>
  			<title>Provide the most common system functionality out-of-the-box</title>
  			<para>
			Meteor itself implements many aspects out of the box, like user 
			authentication and authorization, data storage, and user interface.	
			Developers should not have to concern themselves with common system aspects but 
			should be able to focus on business functionality. This is critical to making 
			Meteor a low-cost development choice.
			</para>
  		</formalpara>
  	</listitem>
  </itemizedlist>
  Each of these design goals has been adopted in order to either reduce costs to developers of creating or assembling systems, 
  increase revenues to developers that create modules, or to reduce costs to businesses that buy and use systems. 
  The details of how to create modules for Meteor-based systems is left to the rest of this manual. 
  However, it is important to understand that these design choices were adopted in order to meet Meteor's 
  business goal of profiably producing high-quality software for small businesses. 
  </para>
</section>  

<section>
  	<title>Comparison to other frameworks</title>
  <para>
  Many frameworks are created with only the goal of making software development 
  easier and less expensive (like Ruby On Rails, Grails), but they don't address software reuse, 
  maintenance, or customization issues thus making software prohibitively 
  expensive to maintain and customize.
  </para>
  <para>
  Some existing frameworks try to make software easier to reuse and customize 
  but don't support dynamic modularization (like Compiere ERP), thus making 
  software prohibitively expensive by requiring engineers to apply updates, 
  customizations, and extensions.
  </para>
  <para>
  Some frameworks support dynamic modularization but require vendors to 
  build hooks into thier modules in order to make it possible to customize them (like Drupal, Sugar CRM, Tiny ERP), 
  thus increasing the cost of creating modules or reducing the possibility of reusing modules.
  </para>
  <para>
  Many/Most frameworks have no system model nor any method of enabling a module to 
  implement a system aspect like security and UI.  Most framworks have some system 
  aspects built into the framework but those implementations are not substitutable, 
  thus limiting the resulting system to only what is in the framework. For instance, 
  if the framework does not provide security authorization then each module must 
  handle that themselves.  
  In contrast, Meteor's system functionality, like its UI for instance, can be 
  removed and replaced by other modules that implement the UI in a completely 
  different manner, thus making a Meteor-based system much more reusable.
  Also, any system aspect that Meteor does not supply out-of-the-box may be 
  implemented by a thord-party and added into Meteor.     
  </para>
  <para>
  Meteor is designed to bring it all together: 
  modular software assembly, model-driven system aspects, unanticipated customization, and 
  a lot of common functionality out of the box. 
  </para>
</section>  
  
   
</chapter>